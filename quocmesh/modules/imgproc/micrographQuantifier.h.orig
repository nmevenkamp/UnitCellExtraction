#ifndef __MICROGRAPHQUANTIFIER_H
#define __MICROGRAPHQUANTIFIER_H

#include <aol.h>
#include <atomFinder.h>

namespace im {

template <typename RealType>
RealType convertElectronsPerPixelToCoulombPerSquareCentimeter ( const int IncidentElectronsPerPixel, const RealType PixelSizeInPicometres ) {
  return IncidentElectronsPerPixel * 1.6021766208 * 10.0 / ( aol::Sqr<RealType> ( PixelSizeInPicometres ) ); // canceled 1e-19 from elementary charge against 1e-20 conversion factor from pm^2 to cm^2
}

template <typename RealType>
RealType convertAngstromToNanoMeter ( const RealType Angstrom ) {
  return 0.1 * Angstrom;
}

template <typename RealType>
RealType convertAngstromToPicoMeter ( const RealType Angstrom ) {
  return 100 * Angstrom;
}

template <typename RealType>
RealType convertPicoMeterToNanoMeter ( const RealType PicoMeter ) {
  return 1e-3 * PicoMeter;
}
 
template <typename RealType>
void plotNanoMeterScaleOverlay ( const char* BasePath, const qc::GridSize<qc::QC_2D> &SizeInPixels, const RealType PixelSizeInNanoMeters, const int BarLengthInNanoMeters = 1,
                                 const RealType RelativeXOffset = 0.05, const RealType RelativeYOffset = 0.05,
                                 const std::string &Font = "Verdana", const int FontSize = 14, const int LineWidth = 10 ) {
  
  const RealType barLengthInPixels = static_cast<RealType> ( BarLengthInNanoMeters ) / PixelSizeInNanoMeters;
  
  aol::RandomAccessContainer<aol::Vec<2, RealType> > points;
  aol::Vec<2, RealType> point;
  point[0] = RelativeXOffset * SizeInPixels.getNumX ( );
  point[1] = RelativeYOffset * SizeInPixels.getNumY ( );
  points.pushBack ( point );
  point[0] += barLengthInPixels;
  points.pushBack ( point );
  aol::Plotter<RealType> plotter;
  aol::PlotDataFileHandler<RealType> plotHandler;
  plotHandler.generateCurvePlot ( points, false, "", aol::strprintf ( "lc \"white\" lw %d", LineWidth ) );
  plotter.addPlotCommandsFromHandler ( plotHandler );
  plotter.setBackgroundPNGSettings ( SizeInPixels.getNumX ( ), SizeInPixels.getNumY ( ) );
  plotter.setXRange ( 0, SizeInPixels.getNumX ( )-1 );
  plotter.setYRange ( 0, SizeInPixels.getNumY ( )-1 );
  plotter.addText ( aol::strprintf ( "%d nm", BarLengthInNanoMeters ), 0.5 * ( points[0][0] + points[1][0] ), points[0][1] + 5 + FontSize, aol::GNUPLOT_TEXT_CENTER, Font, FontSize, "white" );
  plotter.set_outfile_base_name ( BasePath );
  plotter.genPDF ( );
}

  
/**
 * Quantifies electron micrographs (e.g. STEM images) based on Precision, Fidelity, and (Mis-) Detection fraction.
 *
 * \author Mevenkamp
 * \ingroup ElectronMicroscopy
 */
template <typename _RealType,
          typename _MatrixType = aol::FullMatrix<_RealType>,
          typename _LinearRegressionType = aol::LinearRegressionQR<_RealType>,
          typename _ScalarPictureType = qc::ScalarArray<_RealType, qc::QC_2D>,
          typename _ColoredPictureType = qc::MultiArray<_RealType, qc::QC_2D, 3> >
class MicrographQuantifier {
  typedef _RealType RealType;
  typedef _MatrixType MatrixType;
  typedef _LinearRegressionType LinearRegressionType;
  typedef _ScalarPictureType PictureType;
  typedef _ColoredPictureType ColoredPictureType;
protected:
  std::string _outputDir, _outputDirGT, _outputDirEstimate;
  bool _quietMode, _diskOutput;
public:
  MicrographQuantifier ( const std::string &OutputDir = "", const bool Quiet = true )
    : _outputDir ( OutputDir ), _quietMode ( Quiet ), _diskOutput ( OutputDir != "" ) {
    setOutputDir ( OutputDir );
  }
  
  const aol::Vec2<RealType> getPrecisions ( const aol::MultiVector<RealType> &Centers,
                                            const aol::MultiVector<RealType> &LatticeVectors,
                                            const RealType PeriodDelta, const RealType AngleDelta,
                                            const char *GnuplotXMatches = NULL, const char *GnuplotYMatches = NULL ) const {
    const RealType periodX = LatticeVectors[0].norm ( );
    const RealType periodY = LatticeVectors[1].norm ( );
    const RealType angleX = atan2 ( LatticeVectors[0][1], LatticeVectors[0][0] ) * 180.0 / aol::NumberTrait<RealType>::pi;
    const RealType angleY = atan2 ( LatticeVectors[1][1], LatticeVectors[1][0] ) * 180.0 / aol::NumberTrait<RealType>::pi;
    return getPrecisions ( Centers, periodX, periodY, PeriodDelta, angleX, angleY, AngleDelta, GnuplotXMatches, GnuplotYMatches );
  }
  
  const aol::Vec2<RealType> getPrecisions ( const aol::MultiVector<RealType> &Centers,
                                            const RealType PeriodX, const RealType PeriodY, const RealType PeriodDelta,
                                            const RealType AngleX, const RealType AngleY, const RealType AngleDelta,
                                            const char *GnuplotXMatches = NULL, const char *GnuplotYMatches = NULL ) const {
    aol::MultiVector<RealType> distances;
    getInterAtomicDistances ( distances, Centers, PeriodX, PeriodY, PeriodDelta, AngleX, AngleY, AngleDelta, GnuplotXMatches, GnuplotYMatches );
    return getPrecisions ( distances );
  }
  
  const aol::Vec2<RealType> getPrecisions ( const std::string &CentersCSVSrcPath,
                                            const RealType PeriodX, const RealType PeriodY, const RealType PeriodDelta,
                                            const RealType AngleX, const RealType AngleY, const RealType AngleDelta ) const {
    aol::MultiVector<RealType> centers;
    im::AtomFinder<RealType, MatrixType, LinearRegressionType, PictureType, ColoredPictureType> atomFinder ( _outputDir, _quietMode );
    atomFinder.readCentersFromCSV ( centers, CentersCSVSrcPath );
    return getPrecisions ( centers, PeriodX, PeriodY, PeriodDelta, AngleX, AngleY, AngleDelta );
  }
  
  const aol::Vec2<RealType> getPrecisions ( const aol::MultiVector<RealType> &Centers, const aol::ParameterParser &Parser,
                                            const char *GnuplotXMatches = NULL, const char *GnuplotYMatches = NULL ) const {
    RealType periodX, periodY, periodDelta, angleX, angleY, angleDelta;
    readPrecisionAnalysisParameters ( Parser, periodX, periodY, periodDelta, angleX, angleY, angleDelta );
    return getPrecisions ( Centers, periodX, periodY, periodDelta, angleX, angleY, angleDelta, GnuplotXMatches, GnuplotYMatches );
  }
  
  const aol::Vec2<RealType> getPrecisions ( const std::string &CentersCSVSrcPath, const aol::ParameterParser &Parser ) const {
    aol::MultiVector<RealType> centers;
    im::AtomFinder<RealType, MatrixType, LinearRegressionType, PictureType, ColoredPictureType> atomFinder ( _outputDir, _quietMode );
    atomFinder.readCentersFromCSV ( centers, CentersCSVSrcPath );
    return getPrecisions ( centers, Parser );
  }
  
  const aol::Vec2<RealType> getPrecisions ( const PictureType &Data, const aol::ParameterParser &Parser ) const {
    aol::MultiVector<RealType> centers;
    im::AtomFinder<RealType, MatrixType, LinearRegressionType, PictureType, ColoredPictureType> atomFinder ( _outputDir, _quietMode );
    atomFinder.getAtomPositions ( centers, Data, Parser );
    return getPrecisions ( centers, Parser );
  }
  
  RealType getFidelity ( const aol::MultiVector<RealType> &CentersRef, const aol::MultiVector<RealType> &CentersEstimate ) const;
  
  RealType getFidelity ( const std::string &CentersRefCSVSrcPath, const std::string &CentersEstimateCSVSrcPath ) {
    aol::MultiVector<RealType> centersRef, centersEstimate;
    im::AtomFinder<RealType, MatrixType, LinearRegressionType, PictureType, ColoredPictureType> atomFinder ( _outputDirGT, _quietMode );
    atomFinder.readCentersFromCSV ( centersRef, CentersRefCSVSrcPath );
    atomFinder.setOutputDir ( _outputDirEstimate );
    atomFinder.readCentersFromCSV ( centersEstimate, CentersEstimateCSVSrcPath );
    return getFidelity ( centersRef, centersEstimate );
  }
  
  RealType getFidelity ( const PictureType &Ref, const PictureType &Estimate, const aol::ParameterParser &Parser ) {
    aol::MultiVector<RealType> centersRef, centersEstimate;
    im::AtomFinder<RealType, MatrixType, LinearRegressionType, PictureType, ColoredPictureType> atomFinder ( _outputDirGT, _quietMode );
    atomFinder.getAtomPositions ( centersRef, Ref, Parser );
    atomFinder.setOutputDir ( _outputDirEstimate );
    atomFinder.getAtomPositions ( centersEstimate, Estimate, Parser );
    return getFidelity ( centersRef, centersEstimate );
  }
  
  int getNumCorrespondences ( const aol::MultiVector<RealType> &CentersRef, const aol::MultiVector<RealType> &CentersEstimate ) const;
  
  RealType getDetectionFraction ( const aol::MultiVector<RealType> &CentersRef, const aol::MultiVector<RealType> &CentersEstimate ) const {
    return static_cast<RealType> ( getNumCorrespondences ( CentersRef, CentersEstimate ) ) / CentersRef.numComponents ( );
  }
  
  RealType getDetectionFraction ( const std::string &CentersRefCSVSrcPath, const std::string &CentersEstimateCSVSrcPath ) {
    aol::MultiVector<RealType> centersRef, centersEstimate;
    im::AtomFinder<RealType, MatrixType, LinearRegressionType, PictureType, ColoredPictureType> atomFinder ( _outputDirGT, _quietMode );
    atomFinder.readCentersFromCSV ( centersRef, CentersRefCSVSrcPath );
    atomFinder.setOutputDir ( _outputDirEstimate );
    atomFinder.readCentersFromCSV ( centersEstimate, CentersEstimateCSVSrcPath );
    return getDetectionFraction ( centersRef, centersEstimate );
  }
  
  RealType getDetectionFraction ( const PictureType &Ref, const PictureType &Estimate, const aol::ParameterParser &Parser ) {
    aol::MultiVector<RealType> centersRef, centersEstimate;
    im::AtomFinder<RealType, MatrixType, LinearRegressionType, PictureType, ColoredPictureType> atomFinder ( _outputDirGT, _quietMode );
    atomFinder.getAtomPositions ( centersRef, Ref, Parser );
    atomFinder.setOutputDir ( _outputDirEstimate );
    atomFinder.getAtomPositions ( centersEstimate, Estimate, Parser );
    return getDetectionFraction ( centersRef, centersEstimate );
  }
  
  RealType getMisdetectionFraction ( const aol::MultiVector<RealType> &CentersRef, const aol::MultiVector<RealType> &CentersEstimate ) const {
    return 1 - static_cast<RealType> ( getNumCorrespondences ( CentersRef, CentersEstimate ) ) / CentersEstimate.numComponents ( );
  }
  
  RealType getMisdetectionFraction ( const std::string &CentersRefCSVSrcPath, const std::string &CentersEstimateCSVSrcPath ) {
    aol::MultiVector<RealType> centersRef, centersEstimate;
    im::AtomFinder<RealType, MatrixType, LinearRegressionType, PictureType, ColoredPictureType> atomFinder ( _outputDirGT, _quietMode );
    atomFinder.readCentersFromCSV ( centersRef, CentersRefCSVSrcPath );
    atomFinder.setOutputDir ( _outputDirEstimate );
    atomFinder.readCentersFromCSV ( centersEstimate, CentersEstimateCSVSrcPath );
    return getMisdetectionFraction ( centersRef, centersEstimate );
  }
  
  RealType getMisdetectionFraction ( const PictureType &Reference, const PictureType &Estimate, const aol::ParameterParser &Parser ) {
    aol::MultiVector<RealType> centersRef, centersEstimate;
    im::AtomFinder<RealType, MatrixType, LinearRegressionType, PictureType, ColoredPictureType> atomFinder ( _outputDirGT, _quietMode );
    atomFinder.getAtomPositions ( centersRef, Reference, Parser );
    atomFinder.setOutputDir ( _outputDirEstimate );
    atomFinder.getAtomPositions ( centersEstimate, Estimate, Parser );
    return getMisdetectionFraction ( centersRef, centersEstimate );
  }
  
  void saveStatistics ( const std::string &Path, const PictureType &Data, const aol::ParameterParser &Parser ) const {
    aol::MultiVector<RealType> centers;
    aol::Vector<RealType> intensities;
    im::AtomFinder<RealType, MatrixType, LinearRegressionType, PictureType, ColoredPictureType> atomFinder ( _outputDir, _quietMode );
    atomFinder.analyzeAtoms ( centers, intensities, Data, Parser );
    saveStatistics ( Path, aol::MultiVector<RealType> ( 0, 0 ), centers, Parser );
    saveHistograms ( Path, intensities );
  }
  
  const std::string getStatistics ( const PictureType &Data, const aol::ParameterParser &Parser ) const {
    aol::MultiVector<RealType> centers;
    im::AtomFinder<RealType, MatrixType, LinearRegressionType, PictureType, ColoredPictureType> atomFinder ( _outputDir, _quietMode );
    atomFinder.getAtomPositions ( centers, Data, Parser );
    return getStatistics ( aol::MultiVector<RealType> ( 0, 0 ), centers, Parser );
  }
  
  void saveStatistics ( const std::string &Path, const aol::MultiVector<RealType> &Centers, const aol::ParameterParser &Parser ) const {
    saveStatistics ( Path, aol::MultiVector<RealType> ( 0 , 0 ), Centers, Parser );
  }
  
  const std::string getStatistics ( const aol::MultiVector<RealType> &Centers, const aol::ParameterParser &Parser ) const {
    return getStatistics ( aol::MultiVector<RealType> ( 0 , 0 ), Centers, Parser );
  }
  
  void saveStatistics ( const std::string &Path, const PictureType &Reference, const PictureType &Estimate, const aol::ParameterParser &Parser ) const {
    aol::MultiVector<RealType> centersRef, centersEstimate;
    im::AtomFinder<RealType, MatrixType, LinearRegressionType, PictureType, ColoredPictureType> atomFinder ( _outputDirGT, _quietMode );
    atomFinder.getAtomPositions ( centersRef, Reference, Parser );
    
    atomFinder.setOutputDir ( _outputDirEstimate );
    atomFinder.getAtomPositions ( centersEstimate, Estimate, Parser );
    
    saveStatistics ( Path, centersRef, centersEstimate, Parser );
  }
  
  const std::string getStatistics ( const PictureType &Reference, const PictureType &Estimate, const aol::ParameterParser &Parser ) const {
    aol::MultiVector<RealType> centersRef, centersEstimate;
    im::AtomFinder<RealType, MatrixType, LinearRegressionType, PictureType, ColoredPictureType> atomFinder ( _outputDirGT, _quietMode );
    atomFinder.getAtomPositions ( centersRef, Reference, Parser );
    atomFinder.setOutputDir ( _outputDirEstimate );
    atomFinder.getAtomPositions ( centersEstimate, Estimate, Parser );
    return getStatistics ( centersRef, centersEstimate, Parser );
  }
  
  void saveStatistics ( const std::string &Path, const aol::MultiVector<RealType> &CentersRef, const aol::MultiVector<RealType> &CentersEstimate, const aol::ParameterParser &Parser ) const {
    ofstream txtFile;
    txtFile.open ( Path.c_str ( ) );
    txtFile << getStatistics ( CentersRef, CentersEstimate, Parser );
    txtFile.close ( );
  }
  
  const std::string getStatistics ( const aol::MultiVector<RealType> &CentersRef, const aol::MultiVector<RealType> &CentersEstimate, const aol::ParameterParser &Parser ) const {
    RealType periodX, periodY, periodDelta, angleX, angleY, angleDelta, pixelSizeInPicometres, incidentElectronsPerPixel;
    readPrecisionAnalysisParameters ( Parser, periodX, periodY, periodDelta, angleX, angleY, angleDelta, pixelSizeInPicometres, incidentElectronsPerPixel );
    return getStatistics ( CentersRef, CentersEstimate, periodX, periodY, periodDelta, angleX, angleY, angleDelta, pixelSizeInPicometres, incidentElectronsPerPixel );
  }
  
  void saveStatistics ( const std::string &Path, const aol::MultiVector<RealType> &Centers,
                        const RealType PeriodX = 0, const RealType PeriodY = 0, const RealType PeriodDelta = 0,
                        const RealType AngleX = 0, const RealType AngleY = 0, const RealType AngleDelta = 0,
                        const RealType PixelSizeInPicometres = 0, const RealType IncidentElectronsPerPixel = 0 ) const {
    saveStatistics ( Path, aol::MultiVector<RealType> ( 0, 0 ), Centers, PeriodX, PeriodY, PeriodDelta, AngleX, AngleY, AngleDelta, PixelSizeInPicometres, IncidentElectronsPerPixel );
  }
  
  const std::string getStatistics ( const aol::MultiVector<RealType> &Centers,
                                    const RealType PeriodX = 0, const RealType PeriodY = 0, const RealType PeriodDelta = 0,
                                    const RealType AngleX = 0, const RealType AngleY = 0, const RealType AngleDelta = 0,
                                    const RealType PixelSizeInPicometres = 0, const RealType IncidentElectronsPerPixel = 0 ) const {
    return getStatistics ( aol::MultiVector<RealType> ( 0, 0 ), Centers, PeriodX, PeriodY, PeriodDelta, AngleX, AngleY, AngleDelta, PixelSizeInPicometres, IncidentElectronsPerPixel );
  }
  
  void saveStatistics ( const std::string &Path, const aol::MultiVector<RealType> &CentersRef, const aol::MultiVector<RealType> &CentersEstimate,
                        const RealType PeriodX = 0, const RealType PeriodY = 0, const RealType PeriodDelta = 0,
                        const RealType AngleX = 0, const RealType AngleY = 0, const RealType AngleDelta = 0,
                        const RealType PixelSizeInPicometres = 0, const RealType IncidentElectronsPerPixel = 0 ) const {
    ofstream txtFile;
    txtFile.open ( Path.c_str ( ) );
    txtFile << getStatistics ( CentersRef, CentersEstimate, PeriodX, PeriodY, PeriodDelta, AngleX, AngleY, AngleDelta, PixelSizeInPicometres, IncidentElectronsPerPixel );
    txtFile.close ( );
  }
  
  const std::string getStatistics ( const aol::MultiVector<RealType> &CentersRef, const aol::MultiVector<RealType> &CentersEstimate,
                                    const RealType PeriodX = 0, const RealType PeriodY = 0, const RealType PeriodDelta = 0,
                                    const RealType AngleX = 0, const RealType AngleY = 0, const RealType AngleDelta = 0,
                                    const RealType PixelSizeInPicometres = 0, const RealType IncidentElectronsPerPixel = 0 ) const {
    aol::MultiVector<RealType> distances;
    aol::Vec2<RealType> precisions, meanDistances;
    aol::Vec2<int> numNeighbors;
    
    if ( PeriodX > 0 && PeriodY > 0 ) {
      getInterAtomicDistances ( distances, CentersEstimate, PeriodX, PeriodY, PeriodDelta, AngleX, AngleY, AngleDelta );
      precisions.set ( getPrecisions ( distances ) );
      meanDistances.set ( distances[0].getMeanValue ( ), distances[1].getMeanValue ( ) );
      numNeighbors.set ( distances[0].size ( ), distances[1].size ( ) );
    }
    
    std::stringstream ss;
    ss << "---------- General ------------" << std::endl;
    if ( IncidentElectronsPerPixel > 0 && PixelSizeInPicometres > 0 )
      ss << "Dose:                              " << convertElectronsPerPixelToCoulombPerSquareCentimeter<RealType> ( IncidentElectronsPerPixel, PixelSizeInPicometres ) << " C/cm^2" << std::endl;
    ss << "Number of atoms:                   " << CentersEstimate.numComponents ( ) << std::endl;
    if ( CentersRef.numComponents ( ) > 0 )
      ss << "Number of atoms (ref.):            " << CentersRef.numComponents ( ) << std::endl;
    
    if ( PeriodX > 0 && PeriodY > 0 ) {
      ss << std::endl << std::endl;
      ss << "---------- Precision ----------" << std::endl;
      ss << "Number of horizontal neighbors:    " << numNeighbors[0] << std::endl;
      ss << "Number of vertical neighbors:      " << numNeighbors[1] << std::endl;
      ss << "Mean horizontal atom separation:   " << meanDistances[0] << " px"
         << ( PixelSizeInPicometres > 0 ? aol::strprintf ( "; %f pm", meanDistances[0] * PixelSizeInPicometres ) : "" ) << std::endl;
      ss << "Mean vertical atom separation:     " << meanDistances[1] << " px"
         << ( PixelSizeInPicometres > 0 ? aol::strprintf ( "; %f pm", meanDistances[1] * PixelSizeInPicometres ) : "" ) << std::endl;
      ss << "Horizontal precision:              " << precisions[0] << " px"
         << ( PixelSizeInPicometres > 0 ? aol::strprintf ( "; %f pm", precisions[0] * PixelSizeInPicometres ) : "" ) << std::endl;
      ss << "Vertical precision:                " << precisions[1] << " px"
         << ( PixelSizeInPicometres > 0 ? aol::strprintf ( "; %f pm", precisions[1] * PixelSizeInPicometres ) : "" ) << std::endl;
      ss << "Total precision:                   " << precisions.norm ( ) << " px"
         << ( PixelSizeInPicometres > 0 ? aol::strprintf ( "; %f pm", precisions.norm ( ) * PixelSizeInPicometres ) : "" ) << std::endl;
    }
    
    if ( CentersRef.numComponents ( ) > 0 ) {
      const RealType detectionFraction = getDetectionFraction ( CentersRef, CentersEstimate );
      const RealType misdetectionFraction = getMisdetectionFraction ( CentersRef, CentersEstimate );
      const RealType fidelity = getFidelity ( CentersRef, CentersEstimate );
      
      ss << std::endl << std::endl;
      ss << "---------- Fidelity  ----------" << std::endl;
      ss << "Detection fraction:                " << detectionFraction << std::endl;
      ss << "Misdetection fraction:             " << misdetectionFraction << std::endl;
      ss << "Fidelity:                          " << fidelity << " px"
         << ( PixelSizeInPicometres > 0 ? aol::strprintf ( "; %f pm", fidelity * PixelSizeInPicometres ) : "" ) << std::endl;
    }
    
    return ss.str ( );
  }
  
  void saveHistograms ( const std::string &Path, const aol::Vector<RealType> &Intensities ) const {
    aol::Vector<int> hist;
    aol::Vector<RealType> intensities ( Intensities );
    aol::Vec2<double> minMax = intensities.getSaturatedMinMaxValue ( 0.15 );
    intensities.clamp ( minMax[0], minMax[1] );
    intensities.createHistogramOfValues ( hist, 20 );
    hist.saveASCII ( aol::strprintf ( "%s_intensitiesHist.csv", Path.c_str ( ) ).c_str ( ) );
  }
  
  void setOutputDir ( const std::string &OutputDir ) {
    _outputDir = OutputDir;
    _diskOutput = OutputDir != "";
    
    if ( _diskOutput ) {
      std::stringstream ss;
      ss << OutputDir << "/gt";
      _outputDirGT = ss.str ( );
      aol::makeDirectory ( _outputDirGT.c_str ( ) );
      
      ss.str ( std::string ( ) ); // clear stringstream
      ss << OutputDir << "/estimate";
      _outputDirEstimate = ss.str ( );
      aol::makeDirectory ( _outputDirEstimate.c_str ( ) );
    }
  }
  
  void setQuietMode ( const bool Quiet = true ) {
    _quietMode = Quiet;
  }
private:
  void readPrecisionAnalysisParameters ( const aol::ParameterParser &Parser,
                                         RealType &PeriodX, RealType &PeriodY, RealType &PeriodDelta,
                                         RealType &AngleX, RealType &AngleY, RealType &AngleDelta ) const {
    RealType pixelSizeInPicometres, incidentElectronsPerPixel;
    readPrecisionAnalysisParameters ( Parser, PeriodX, PeriodY, PeriodDelta, AngleX, AngleY, AngleDelta, pixelSizeInPicometres, incidentElectronsPerPixel );
  }
  
  void readPrecisionAnalysisParameters ( const aol::ParameterParser &Parser,
                                         RealType &PeriodX, RealType &PeriodY, RealType &PeriodDelta,
                                         RealType &AngleX, RealType &AngleY, RealType &AngleDelta,
                                         RealType &PixelSizeInPicometres, RealType &IncidentElectronsPerPixel ) const {
    PeriodX = Parser.getDoubleOrDefault ( "periodX", 0 );
    PeriodY = Parser.getDoubleOrDefault ( "periodY", 0 );
    PeriodDelta = Parser.getDoubleOrDefault ( "periodDelta", 0 );
    AngleX = Parser.getDoubleOrDefault ( "angleX", 0 );
    AngleY = Parser.getDoubleOrDefault ( "angleY", 0 );
    AngleDelta = Parser.getDoubleOrDefault ( "angleDelta", 0 );
    PixelSizeInPicometres = Parser.getDoubleOrDefault ( "pixelSizeInPicometres", 0 );
    IncidentElectronsPerPixel = Parser.getDoubleOrDefault ( "incidentElectronsPerPixel", 0 );
  }

public:
  const aol::Vec2<RealType> getPrecisions ( const aol::MultiVector<RealType> &Distances ) const {
    if ( Distances.numComponents() < 2 ) throw aol::Exception ( "Distances must have at least two components (x/y distances)", __FILE__, __LINE__ );
    return aol::Vec2<RealType> ( Distances[0].getStdDev ( ), Distances[1].getStdDev ( ) );
  }

  const aol::Vec2<RealType> getPrecisionsComponentsAveraged ( const aol::MultiVector<RealType> &Distances ) const {
    if ( Distances.numComponents() != 6 )
      throw aol::Exception ( "Unexpected number of components", __FILE__, __LINE__ );

    return aol::Vec2<RealType> ( sqrt( aol::Sqr( Distances[2].getStdDev() ) + aol::Sqr( Distances[4].getStdDev() ) ), sqrt( aol::Sqr( Distances[3].getStdDev() ) + aol::Sqr( Distances[5].getStdDev() ) ) );
  }


  RealType getTotalPrecision ( const aol::MultiVector<RealType> &Distances ) const {
    return getPrecisions ( Distances ).norm ( );
  }
  
  void getInterAtomicDistances ( aol::MultiVector<RealType> &Distances, const aol::MultiVector<RealType> &Centers,
                                 const RealType PeriodX, const RealType PeriodY, const RealType PeriodDelta,
                                 const RealType AngleX, const RealType AngleY, const RealType AngleDelta,
                                 const char *GnuplotXMatches = NULL, const char *GnuplotYMatches = NULL ) const;
  
  void getInterAtomicDistances ( aol::MultiVector<RealType> &Distances, const aol::MultiVector<RealType> &Centers,
                                const aol::ParameterParser &Parser,
                                const char *GnuplotXMatches = NULL, const char *GnuplotYMatches = NULL ) const {
    RealType periodX, periodY, periodDelta, angleX, angleY, angleDelta;
    readPrecisionAnalysisParameters ( Parser, periodX, periodY, periodDelta, angleX, angleY, angleDelta );
    return getInterAtomicDistances ( Distances, Centers, periodX, periodY, periodDelta, angleX, angleY, angleDelta, GnuplotXMatches, GnuplotYMatches );
  }

private:
  void getCorrespondences ( aol::Vector<short> &Correspondences, const aol::MultiVector<RealType> &CentersRef, const aol::MultiVector<RealType> &CentersEstimate ) const;
};
  
  
template <typename RealType>
bool testMicrographQuantifier ( const bool QuietMode = false ) {
  std::cerr << setprecision ( 16 ) << "Testing MicrographQuantifier.." << std::endl;
  const RealType threshold = 1e-12;
  bool allTestsOK = true;
  
  // Simple grid errors (exclusively in either x or y direction)
  const int nx = 11, ny = 11, n = nx * ny;
  aol::MultiVector<RealType> atomCentersReferenceX ( n, 2 ), atomCentersReferenceY ( n, 2 );
  const RealType epsX = 0.1, epsY = 0.2;
  for ( int y=0; y<ny ; ++y ) {
    for ( int x=0; x<nx ; ++x ) {
      atomCentersReferenceX[y * nx + x][0] = x + ( ( x % 2 == 0 ) ? 1 : -1 ) * epsX;
      atomCentersReferenceX[y * nx + x][1] = y;
      atomCentersReferenceY[y * nx + x][0] = x;
      atomCentersReferenceY[y * nx + x][1] = y + ( ( y % 2 == 0 ) ? 1 : -1 ) * epsY;
    }
  }
  aol::MultiVector<RealType> atomCenters ( atomCentersReferenceX );
  for ( int i=0; i<n ; ++i ) atomCenters[i][0] += epsX;  // shift all atoms by epsX                       ( fidelity )
  atomCenters[0][0] = -10;                               // make the first ground truth atom misdetected  ( detection fraction & misdetection fraction )
  atomCenters.resize ( n+1, 2 );                         // add a wrongly detected atom                   ( misdetection fraction )
  atomCenters[n][0] = -10;
  atomCenters[n][1] = -10;
  
  // Random grid errors (for testing total precision)
  aol::RandomGenerator rng;
  aol::MultiVector<RealType> atomCentersReference ( n, 2 );
  const RealType eps = 0.1;
  for ( int y=0; y<ny ; ++y ) {
    for ( int x=0; x<nx ; ++x ) {
      atomCentersReference[y * nx + x][0] = x + rng.rReal<RealType> ( -eps, eps );
      atomCentersReference[y * nx + x][1] = y + rng.rReal<RealType> ( -eps, eps );
    }
  }
  aol::MultiVector<RealType> distances ( 2, 0 );
  for ( int y=0; y<ny ; ++y ) {
    for ( int x=0; x<nx-1 ; ++x ) {
      aol::Vec2<RealType> diff ( atomCentersReference[y * nx + x][0] - atomCentersReference[y * nx + (x+1)][0],
                                 atomCentersReference[y * nx + x][1] - atomCentersReference[y * nx + (x+1)][1] );
      distances[0].pushBack ( diff.norm ( ) );
    }
  }
  for ( int y=1; y<ny ; ++y ) {
    for ( int x=0; x<nx ; ++x ) {
      aol::Vec2<RealType> diff ( atomCentersReference[y * nx + x][0] - atomCentersReference[(y-1) * nx + x][0],
                                 atomCentersReference[y * nx + x][1] - atomCentersReference[(y-1) * nx + x][1] );
      distances[1].pushBack ( diff.norm ( ) );
    }
  }
  const aol::Vec2<RealType> precisionReference = aol::Vec2<RealType> ( distances[0].getStdDev ( ), distances[1].getStdDev ( ) );
  
  MicrographQuantifier<RealType> micrographQuantifier;
  std::cerr << "Testing fidelity.. ";
  const RealType fidelityReference = epsX;
  const RealType fidelity = micrographQuantifier.getFidelity ( atomCentersReferenceX, atomCenters );
  const bool fidelityPassed = aol::Abs<RealType> ( fidelity - fidelityReference ) <= threshold;
  std::cerr << ( fidelityPassed ? "OK." : "FAIL!" ) << std::endl;
  if ( !QuietMode && !fidelityPassed ) {
    std::cerr << "Fidelity (ref):                                   " << fidelityReference << std::endl;
    std::cerr << "Fidelity (MicrographQuantifier):                  " << fidelity << std::endl;
  }
  allTestsOK = allTestsOK && fidelityPassed;
  
  std::cerr << "Testing detection fraction.. ";
  const RealType detectionFractionReference = static_cast<RealType> ( n - 1 ) / static_cast<RealType> ( n );
  const RealType detectionFraction = micrographQuantifier.getDetectionFraction ( atomCentersReferenceX, atomCenters );
  const bool detectionFractionPassed = aol::Abs<RealType> ( detectionFraction - detectionFractionReference ) <= threshold;
  std::cerr << ( detectionFractionPassed ? "OK." : "FAIL!" ) << std::endl;
  if ( !QuietMode && !detectionFractionPassed ) {
    std::cerr << "Detection fraction (ref):                         " << detectionFractionReference << std::endl;
    std::cerr << "Detection fraction (MicrographQuantifier):        " << detectionFraction << std::endl;
  }
  allTestsOK = allTestsOK && detectionFractionPassed;
  
  std::cerr << "Testing misdetection fraction.. ";
  const RealType misdetectionFractionReference = 2.0 / static_cast<RealType> ( n+1 );
  const RealType misdetectionFraction = micrographQuantifier.getMisdetectionFraction ( atomCentersReferenceX, atomCenters );
  const bool misdetectionFractionPassed = aol::Abs<RealType> ( misdetectionFraction - misdetectionFractionReference ) <= threshold;
  std::cerr << ( misdetectionFractionPassed ? "OK." : "FAIL!" ) << std::endl;
  if ( !QuietMode && !misdetectionFractionPassed ) {
    std::cerr << "Misdetection fraction (ref):                      " << misdetectionFractionReference << std::endl;
    std::cerr << "Misdetection fraction (MicrographQuantifier):     " << misdetectionFraction << std::endl;
  }
  allTestsOK = allTestsOK && misdetectionFractionPassed;
  
  std::cerr << "Testing precision.. ";
  const int nxDistances = (nx-1) * ny, nyDistances = (ny-1) * nx;
  const RealType biasFactorX = sqrt ( static_cast<RealType> ( nxDistances ) / static_cast<RealType> ( nxDistances-1 ) );
  const RealType biasFactorY = sqrt ( static_cast<RealType> ( nyDistances ) / static_cast<RealType> ( nyDistances-1 ) );
  const RealType precisionXReference = biasFactorX * 2 * epsX;
  const RealType precisionYReference = biasFactorY * 2 * epsY;
  const aol::Vec2<RealType> precisionX = micrographQuantifier.getPrecisions ( atomCentersReferenceX, 1, 1, 2.1 * epsX, 0, 90, 3 );
  const aol::Vec2<RealType> precisionY = micrographQuantifier.getPrecisions ( atomCentersReferenceY, 1, 1, 2.1 * epsY, 0, 90, 3 );
  const aol::Vec2<RealType> precision = micrographQuantifier.getPrecisions ( atomCentersReference, 1, 1, 2.1 * eps, 0, 90, 15 );
  const bool precisionPassed = aol::Abs<RealType> ( precisionX[0] - precisionXReference ) <= threshold && aol::Abs<RealType> ( precisionX[1] ) <= threshold
                            && aol::Abs<RealType> ( precisionY[1] - precisionYReference ) <= threshold && aol::Abs<RealType> ( precisionY[0] ) <= threshold
                            && aol::Abs<RealType> ( precision[0] - precisionReference[0] ) <= threshold && aol::Abs<RealType> ( precision[1] - precisionReference[1] ) <= threshold;
  std::cerr << ( precisionPassed ? "OK." : "FAIL!" ) << std::endl;
  if ( !QuietMode && !precisionPassed ) {
    std::cerr << "Precision x-errs (ref):                           " << precisionXReference << "; " << 0 << std::endl;
    std::cerr << "Precision x-errs (MicrographQuantifier):          " << precisionX[0] << "; " << precisionX[1] << std::endl;
    std::cerr << "Precision y-errs (ref):                           " << precisionYReference << "; " << 0 << std::endl;
    std::cerr << "Precision y-errs (MicrographQuantifier):          " << precisionY[1] << "; " << precisionY[0] << std::endl;
    std::cerr << "Precision combined-errs (ref):                    " << precisionReference[0] << "; " << precisionReference[1] << std::endl;
    std::cerr << "Precision combined-errs (MicrographQuantifier):   " << precision[0] << "; " << precision[1] << std::endl;
  }
  allTestsOK = allTestsOK && precisionPassed;
  std::cerr << "Tests on MicrographQuantifier: " << ( allTestsOK ? "OK." : "FAIL!" ) << std::endl;
  
  return allTestsOK;
}
  
} // namespace im

#endif
